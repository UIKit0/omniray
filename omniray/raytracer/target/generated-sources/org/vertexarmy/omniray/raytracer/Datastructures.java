// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastructures.proto

package org.vertexarmy.omniray.raytracer;

public final class Datastructures {
    private Datastructures() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
    }

    public interface Vec3OrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required float x = 1;

        /**
         * <code>required float x = 1;</code>
         */
        boolean hasX();

        /**
         * <code>required float x = 1;</code>
         */
        float getX();

        // required float y = 2;

        /**
         * <code>required float y = 2;</code>
         */
        boolean hasY();

        /**
         * <code>required float y = 2;</code>
         */
        float getY();

        // required float z = 3;

        /**
         * <code>required float z = 3;</code>
         */
        boolean hasZ();

        /**
         * <code>required float z = 3;</code>
         */
        float getZ();
    }

    /**
     * Protobuf type {@code org.vertexarmy.omniray.raytracer.Vec3}
     */
    public static final class Vec3 extends
            com.google.protobuf.GeneratedMessage
            implements Vec3OrBuilder {
        // Use Vec3.newBuilder() to construct.
        private Vec3(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Vec3(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Vec3 defaultInstance;

        public static Vec3 getDefaultInstance() {
            return defaultInstance;
        }

        public Vec3 getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Vec3(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 13: {
                            bitField0_ |= 0x00000001;
                            x_ = input.readFloat();
                            break;
                        }
                        case 21: {
                            bitField0_ |= 0x00000002;
                            y_ = input.readFloat();
                            break;
                        }
                        case 29: {
                            bitField0_ |= 0x00000004;
                            z_ = input.readFloat();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Vec3_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Vec3_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.vertexarmy.omniray.raytracer.Datastructures.Vec3.class, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder.class);
        }

        public static com.google.protobuf.Parser<Vec3> PARSER =
                new com.google.protobuf.AbstractParser<Vec3>() {
                    public Vec3 parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new Vec3(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<Vec3> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // required float x = 1;
        public static final int X_FIELD_NUMBER = 1;
        private float x_;

        /**
         * <code>required float x = 1;</code>
         */
        public boolean hasX() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required float x = 1;</code>
         */
        public float getX() {
            return x_;
        }

        // required float y = 2;
        public static final int Y_FIELD_NUMBER = 2;
        private float y_;

        /**
         * <code>required float y = 2;</code>
         */
        public boolean hasY() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required float y = 2;</code>
         */
        public float getY() {
            return y_;
        }

        // required float z = 3;
        public static final int Z_FIELD_NUMBER = 3;
        private float z_;

        /**
         * <code>required float z = 3;</code>
         */
        public boolean hasZ() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required float z = 3;</code>
         */
        public float getZ() {
            return z_;
        }

        private void initFields() {
            x_ = 0F;
            y_ = 0F;
            z_ = 0F;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasX()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasY()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasZ()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeFloat(1, x_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeFloat(2, y_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeFloat(3, z_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(1, x_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(2, y_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(3, z_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(org.vertexarmy.omniray.raytracer.Datastructures.Vec3 prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.vertexarmy.omniray.raytracer.Vec3}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Vec3_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Vec3_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.vertexarmy.omniray.raytracer.Datastructures.Vec3.class, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder.class);
            }

            // Construct using org.vertexarmy.omniray.raytracer.Datastructures.Vec3.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                x_ = 0F;
                bitField0_ = (bitField0_ & ~0x00000001);
                y_ = 0F;
                bitField0_ = (bitField0_ & ~0x00000002);
                z_ = 0F;
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Vec3_descriptor;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getDefaultInstanceForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Vec3 build() {
                org.vertexarmy.omniray.raytracer.Datastructures.Vec3 result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Vec3 buildPartial() {
                org.vertexarmy.omniray.raytracer.Datastructures.Vec3 result = new org.vertexarmy.omniray.raytracer.Datastructures.Vec3(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.x_ = x_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.y_ = y_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.z_ = z_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.vertexarmy.omniray.raytracer.Datastructures.Vec3) {
                    return mergeFrom((org.vertexarmy.omniray.raytracer.Datastructures.Vec3) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.vertexarmy.omniray.raytracer.Datastructures.Vec3 other) {
                if (other == org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance()) return this;
                if (other.hasX()) {
                    setX(other.getX());
                }
                if (other.hasY()) {
                    setY(other.getY());
                }
                if (other.hasZ()) {
                    setZ(other.getZ());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasX()) {

                    return false;
                }
                if (!hasY()) {

                    return false;
                }
                if (!hasZ()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.vertexarmy.omniray.raytracer.Datastructures.Vec3 parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.vertexarmy.omniray.raytracer.Datastructures.Vec3) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required float x = 1;
            private float x_;

            /**
             * <code>required float x = 1;</code>
             */
            public boolean hasX() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required float x = 1;</code>
             */
            public float getX() {
                return x_;
            }

            /**
             * <code>required float x = 1;</code>
             */
            public Builder setX(float value) {
                bitField0_ |= 0x00000001;
                x_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required float x = 1;</code>
             */
            public Builder clearX() {
                bitField0_ = (bitField0_ & ~0x00000001);
                x_ = 0F;
                onChanged();
                return this;
            }

            // required float y = 2;
            private float y_;

            /**
             * <code>required float y = 2;</code>
             */
            public boolean hasY() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required float y = 2;</code>
             */
            public float getY() {
                return y_;
            }

            /**
             * <code>required float y = 2;</code>
             */
            public Builder setY(float value) {
                bitField0_ |= 0x00000002;
                y_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required float y = 2;</code>
             */
            public Builder clearY() {
                bitField0_ = (bitField0_ & ~0x00000002);
                y_ = 0F;
                onChanged();
                return this;
            }

            // required float z = 3;
            private float z_;

            /**
             * <code>required float z = 3;</code>
             */
            public boolean hasZ() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required float z = 3;</code>
             */
            public float getZ() {
                return z_;
            }

            /**
             * <code>required float z = 3;</code>
             */
            public Builder setZ(float value) {
                bitField0_ |= 0x00000004;
                z_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required float z = 3;</code>
             */
            public Builder clearZ() {
                bitField0_ = (bitField0_ & ~0x00000004);
                z_ = 0F;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:org.vertexarmy.omniray.raytracer.Vec3)
        }

        static {
            defaultInstance = new Vec3(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.vertexarmy.omniray.raytracer.Vec3)
    }

    public interface GeometricObjectOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
         */
        boolean hasSphere();

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere getSphere();

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.SphereOrBuilder getSphereOrBuilder();

        // optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
         */
        boolean hasPlane();

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane getPlane();

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.PlaneOrBuilder getPlaneOrBuilder();
    }

    /**
     * Protobuf type {@code org.vertexarmy.omniray.raytracer.GeometricObject}
     */
    public static final class GeometricObject extends
            com.google.protobuf.GeneratedMessage
            implements GeometricObjectOrBuilder {
        // Use GeometricObject.newBuilder() to construct.
        private GeometricObject(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private GeometricObject(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final GeometricObject defaultInstance;

        public static GeometricObject getDefaultInstance() {
            return defaultInstance;
        }

        public GeometricObject getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private GeometricObject(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                                subBuilder = sphere_.toBuilder();
                            }
                            sphere_ = input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(sphere_);
                                sphere_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000001;
                            break;
                        }
                        case 18: {
                            org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = plane_.toBuilder();
                            }
                            plane_ = input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(plane_);
                                plane_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.class, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder.class);
        }

        public static com.google.protobuf.Parser<GeometricObject> PARSER =
                new com.google.protobuf.AbstractParser<GeometricObject>() {
                    public GeometricObject parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new GeometricObject(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<GeometricObject> getParserForType() {
            return PARSER;
        }

        public interface SphereOrBuilder
                extends com.google.protobuf.MessageOrBuilder {

            // required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
             */
            boolean hasCenter();

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
             */
            org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getCenter();

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
             */
            org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder getCenterOrBuilder();

            // required float radius = 2;

            /**
             * <code>required float radius = 2;</code>
             */
            boolean hasRadius();

            /**
             * <code>required float radius = 2;</code>
             */
            float getRadius();
        }

        /**
         * Protobuf type {@code org.vertexarmy.omniray.raytracer.GeometricObject.Sphere}
         */
        public static final class Sphere extends
                com.google.protobuf.GeneratedMessage
                implements SphereOrBuilder {
            // Use Sphere.newBuilder() to construct.
            private Sphere(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
                super(builder);
                this.unknownFields = builder.getUnknownFields();
            }

            private Sphere(boolean noInit) {
                this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
            }

            private static final Sphere defaultInstance;

            public static Sphere getDefaultInstance() {
                return defaultInstance;
            }

            public Sphere getDefaultInstanceForType() {
                return defaultInstance;
            }

            private final com.google.protobuf.UnknownFieldSet unknownFields;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
                return this.unknownFields;
            }

            private Sphere(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                initFields();
                int mutable_bitField0_ = 0;
                com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                        com.google.protobuf.UnknownFieldSet.newBuilder();
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!parseUnknownField(input, unknownFields,
                                        extensionRegistry, tag)) {
                                    done = true;
                                }
                                break;
                            }
                            case 10: {
                                org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder subBuilder = null;
                                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                                    subBuilder = center_.toBuilder();
                                }
                                center_ = input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.Vec3.PARSER, extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(center_);
                                    center_ = subBuilder.buildPartial();
                                }
                                bitField0_ |= 0x00000001;
                                break;
                            }
                            case 21: {
                                bitField0_ |= 0x00000002;
                                radius_ = input.readFloat();
                                break;
                            }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (java.io.IOException e) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(
                            e.getMessage()).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    makeExtensionsImmutable();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.class, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.Builder.class);
            }

            public static com.google.protobuf.Parser<Sphere> PARSER =
                    new com.google.protobuf.AbstractParser<Sphere>() {
                        public Sphere parsePartialFrom(
                                com.google.protobuf.CodedInputStream input,
                                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                                throws com.google.protobuf.InvalidProtocolBufferException {
                            return new Sphere(input, extensionRegistry);
                        }
                    };

            @java.lang.Override
            public com.google.protobuf.Parser<Sphere> getParserForType() {
                return PARSER;
            }

            private int bitField0_;
            // required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;
            public static final int CENTER_FIELD_NUMBER = 1;
            private org.vertexarmy.omniray.raytracer.Datastructures.Vec3 center_;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
             */
            public boolean hasCenter() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getCenter() {
                return center_;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder getCenterOrBuilder() {
                return center_;
            }

            // required float radius = 2;
            public static final int RADIUS_FIELD_NUMBER = 2;
            private float radius_;

            /**
             * <code>required float radius = 2;</code>
             */
            public boolean hasRadius() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required float radius = 2;</code>
             */
            public float getRadius() {
                return radius_;
            }

            private void initFields() {
                center_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                radius_ = 0F;
            }

            private byte memoizedIsInitialized = -1;

            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized != -1) return isInitialized == 1;

                if (!hasCenter()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
                if (!hasRadius()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
                if (!getCenter().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(com.google.protobuf.CodedOutputStream output)
                    throws java.io.IOException {
                getSerializedSize();
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    output.writeMessage(1, center_);
                }
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    output.writeFloat(2, radius_);
                }
                getUnknownFields().writeTo(output);
            }

            private int memoizedSerializedSize = -1;

            public int getSerializedSize() {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeMessageSize(1, center_);
                }
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeFloatSize(2, radius_);
                }
                size += getUnknownFields().getSerializedSize();
                memoizedSerializedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;

            @java.lang.Override
            protected java.lang.Object writeReplace()
                    throws java.io.ObjectStreamException {
                return super.writeReplace();
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseFrom(
                    com.google.protobuf.ByteString data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseFrom(
                    com.google.protobuf.ByteString data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseFrom(byte[] data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseFrom(
                    byte[] data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return PARSER.parseFrom(input);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return PARSER.parseFrom(input, extensionRegistry);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseDelimitedFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return PARSER.parseDelimitedFrom(input);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseDelimitedFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return PARSER.parseDelimitedFrom(input, extensionRegistry);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseFrom(
                    com.google.protobuf.CodedInputStream input)
                    throws java.io.IOException {
                return PARSER.parseFrom(input);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parseFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return PARSER.parseFrom(input, extensionRegistry);
            }

            public static Builder newBuilder() {
                return Builder.create();
            }

            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere prototype) {
                return newBuilder().mergeFrom(prototype);
            }

            public Builder toBuilder() {
                return newBuilder(this);
            }

            @java.lang.Override
            protected Builder newBuilderForType(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                Builder builder = new Builder(parent);
                return builder;
            }

            /**
             * Protobuf type {@code org.vertexarmy.omniray.raytracer.GeometricObject.Sphere}
             */
            public static final class Builder extends
                    com.google.protobuf.GeneratedMessage.Builder<Builder>
                    implements org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.SphereOrBuilder {
                public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
                    return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_descriptor;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
                internalGetFieldAccessorTable() {
                    return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_fieldAccessorTable
                            .ensureFieldAccessorsInitialized(
                                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.class, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.Builder.class);
                }

                // Construct using org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(
                        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        getCenterFieldBuilder();
                    }
                }

                private static Builder create() {
                    return new Builder();
                }

                public Builder clear() {
                    super.clear();
                    if (centerBuilder_ == null) {
                        center_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                    } else {
                        centerBuilder_.clear();
                    }
                    bitField0_ = (bitField0_ & ~0x00000001);
                    radius_ = 0F;
                    bitField0_ = (bitField0_ & ~0x00000002);
                    return this;
                }

                public Builder clone() {
                    return create().mergeFrom(buildPartial());
                }

                public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
                    return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_descriptor;
                }

                public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere getDefaultInstanceForType() {
                    return org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.getDefaultInstance();
                }

                public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere build() {
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(result);
                    }
                    return result;
                }

                public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere buildPartial() {
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere result = new org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere(this);
                    int from_bitField0_ = bitField0_;
                    int to_bitField0_ = 0;
                    if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                        to_bitField0_ |= 0x00000001;
                    }
                    if (centerBuilder_ == null) {
                        result.center_ = center_;
                    } else {
                        result.center_ = centerBuilder_.build();
                    }
                    if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                        to_bitField0_ |= 0x00000002;
                    }
                    result.radius_ = radius_;
                    result.bitField0_ = to_bitField0_;
                    onBuilt();
                    return result;
                }

                public Builder mergeFrom(com.google.protobuf.Message other) {
                    if (other instanceof org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere) {
                        return mergeFrom((org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere) other);
                    } else {
                        super.mergeFrom(other);
                        return this;
                    }
                }

                public Builder mergeFrom(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere other) {
                    if (other == org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.getDefaultInstance())
                        return this;
                    if (other.hasCenter()) {
                        mergeCenter(other.getCenter());
                    }
                    if (other.hasRadius()) {
                        setRadius(other.getRadius());
                    }
                    this.mergeUnknownFields(other.getUnknownFields());
                    return this;
                }

                public final boolean isInitialized() {
                    if (!hasCenter()) {

                        return false;
                    }
                    if (!hasRadius()) {

                        return false;
                    }
                    if (!getCenter().isInitialized()) {

                        return false;
                    }
                    return true;
                }

                public Builder mergeFrom(
                        com.google.protobuf.CodedInputStream input,
                        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws java.io.IOException {
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere parsedMessage = null;
                    try {
                        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        parsedMessage = (org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere) e.getUnfinishedMessage();
                        throw e;
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        }
                    }
                    return this;
                }

                private int bitField0_;

                // required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;
                private org.vertexarmy.omniray.raytracer.Datastructures.Vec3 center_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                private com.google.protobuf.SingleFieldBuilder<
                        org.vertexarmy.omniray.raytracer.Datastructures.Vec3, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder, org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder> centerBuilder_;

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
                 */
                public boolean hasCenter() {
                    return ((bitField0_ & 0x00000001) == 0x00000001);
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
                 */
                public org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getCenter() {
                    if (centerBuilder_ == null) {
                        return center_;
                    } else {
                        return centerBuilder_.getMessage();
                    }
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
                 */
                public Builder setCenter(org.vertexarmy.omniray.raytracer.Datastructures.Vec3 value) {
                    if (centerBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        center_ = value;
                        onChanged();
                    } else {
                        centerBuilder_.setMessage(value);
                    }
                    bitField0_ |= 0x00000001;
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
                 */
                public Builder setCenter(
                        org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder builderForValue) {
                    if (centerBuilder_ == null) {
                        center_ = builderForValue.build();
                        onChanged();
                    } else {
                        centerBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 0x00000001;
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
                 */
                public Builder mergeCenter(org.vertexarmy.omniray.raytracer.Datastructures.Vec3 value) {
                    if (centerBuilder_ == null) {
                        if (((bitField0_ & 0x00000001) == 0x00000001) &&
                                center_ != org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance()) {
                            center_ =
                                    org.vertexarmy.omniray.raytracer.Datastructures.Vec3.newBuilder(center_).mergeFrom(value).buildPartial();
                        } else {
                            center_ = value;
                        }
                        onChanged();
                    } else {
                        centerBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 0x00000001;
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
                 */
                public Builder clearCenter() {
                    if (centerBuilder_ == null) {
                        center_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                        onChanged();
                    } else {
                        centerBuilder_.clear();
                    }
                    bitField0_ = (bitField0_ & ~0x00000001);
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
                 */
                public org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder getCenterBuilder() {
                    bitField0_ |= 0x00000001;
                    onChanged();
                    return getCenterFieldBuilder().getBuilder();
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
                 */
                public org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder getCenterOrBuilder() {
                    if (centerBuilder_ != null) {
                        return centerBuilder_.getMessageOrBuilder();
                    } else {
                        return center_;
                    }
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 center = 1;</code>
                 */
                private com.google.protobuf.SingleFieldBuilder<
                        org.vertexarmy.omniray.raytracer.Datastructures.Vec3, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder, org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder>
                getCenterFieldBuilder() {
                    if (centerBuilder_ == null) {
                        centerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                                org.vertexarmy.omniray.raytracer.Datastructures.Vec3, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder, org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder>(
                                center_,
                                getParentForChildren(),
                                isClean());
                        center_ = null;
                    }
                    return centerBuilder_;
                }

                // required float radius = 2;
                private float radius_;

                /**
                 * <code>required float radius = 2;</code>
                 */
                public boolean hasRadius() {
                    return ((bitField0_ & 0x00000002) == 0x00000002);
                }

                /**
                 * <code>required float radius = 2;</code>
                 */
                public float getRadius() {
                    return radius_;
                }

                /**
                 * <code>required float radius = 2;</code>
                 */
                public Builder setRadius(float value) {
                    bitField0_ |= 0x00000002;
                    radius_ = value;
                    onChanged();
                    return this;
                }

                /**
                 * <code>required float radius = 2;</code>
                 */
                public Builder clearRadius() {
                    bitField0_ = (bitField0_ & ~0x00000002);
                    radius_ = 0F;
                    onChanged();
                    return this;
                }

                // @@protoc_insertion_point(builder_scope:org.vertexarmy.omniray.raytracer.GeometricObject.Sphere)
            }

            static {
                defaultInstance = new Sphere(true);
                defaultInstance.initFields();
            }

            // @@protoc_insertion_point(class_scope:org.vertexarmy.omniray.raytracer.GeometricObject.Sphere)
        }

        public interface PlaneOrBuilder
                extends com.google.protobuf.MessageOrBuilder {

            // required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
             */
            boolean hasOrigin();

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
             */
            org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getOrigin();

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
             */
            org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder getOriginOrBuilder();

            // required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
             */
            boolean hasNormal();

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
             */
            org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getNormal();

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
             */
            org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder getNormalOrBuilder();
        }

        /**
         * Protobuf type {@code org.vertexarmy.omniray.raytracer.GeometricObject.Plane}
         */
        public static final class Plane extends
                com.google.protobuf.GeneratedMessage
                implements PlaneOrBuilder {
            // Use Plane.newBuilder() to construct.
            private Plane(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
                super(builder);
                this.unknownFields = builder.getUnknownFields();
            }

            private Plane(boolean noInit) {
                this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
            }

            private static final Plane defaultInstance;

            public static Plane getDefaultInstance() {
                return defaultInstance;
            }

            public Plane getDefaultInstanceForType() {
                return defaultInstance;
            }

            private final com.google.protobuf.UnknownFieldSet unknownFields;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
                return this.unknownFields;
            }

            private Plane(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                initFields();
                int mutable_bitField0_ = 0;
                com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                        com.google.protobuf.UnknownFieldSet.newBuilder();
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!parseUnknownField(input, unknownFields,
                                        extensionRegistry, tag)) {
                                    done = true;
                                }
                                break;
                            }
                            case 10: {
                                org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder subBuilder = null;
                                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                                    subBuilder = origin_.toBuilder();
                                }
                                origin_ = input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.Vec3.PARSER, extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(origin_);
                                    origin_ = subBuilder.buildPartial();
                                }
                                bitField0_ |= 0x00000001;
                                break;
                            }
                            case 18: {
                                org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder subBuilder = null;
                                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                    subBuilder = normal_.toBuilder();
                                }
                                normal_ = input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.Vec3.PARSER, extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(normal_);
                                    normal_ = subBuilder.buildPartial();
                                }
                                bitField0_ |= 0x00000002;
                                break;
                            }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (java.io.IOException e) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(
                            e.getMessage()).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    makeExtensionsImmutable();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.class, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.Builder.class);
            }

            public static com.google.protobuf.Parser<Plane> PARSER =
                    new com.google.protobuf.AbstractParser<Plane>() {
                        public Plane parsePartialFrom(
                                com.google.protobuf.CodedInputStream input,
                                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                                throws com.google.protobuf.InvalidProtocolBufferException {
                            return new Plane(input, extensionRegistry);
                        }
                    };

            @java.lang.Override
            public com.google.protobuf.Parser<Plane> getParserForType() {
                return PARSER;
            }

            private int bitField0_;
            // required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;
            public static final int ORIGIN_FIELD_NUMBER = 1;
            private org.vertexarmy.omniray.raytracer.Datastructures.Vec3 origin_;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
             */
            public boolean hasOrigin() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getOrigin() {
                return origin_;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder getOriginOrBuilder() {
                return origin_;
            }

            // required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;
            public static final int NORMAL_FIELD_NUMBER = 2;
            private org.vertexarmy.omniray.raytracer.Datastructures.Vec3 normal_;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
             */
            public boolean hasNormal() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getNormal() {
                return normal_;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder getNormalOrBuilder() {
                return normal_;
            }

            private void initFields() {
                origin_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                normal_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
            }

            private byte memoizedIsInitialized = -1;

            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized != -1) return isInitialized == 1;

                if (!hasOrigin()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
                if (!hasNormal()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
                if (!getOrigin().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
                if (!getNormal().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(com.google.protobuf.CodedOutputStream output)
                    throws java.io.IOException {
                getSerializedSize();
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    output.writeMessage(1, origin_);
                }
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    output.writeMessage(2, normal_);
                }
                getUnknownFields().writeTo(output);
            }

            private int memoizedSerializedSize = -1;

            public int getSerializedSize() {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeMessageSize(1, origin_);
                }
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeMessageSize(2, normal_);
                }
                size += getUnknownFields().getSerializedSize();
                memoizedSerializedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;

            @java.lang.Override
            protected java.lang.Object writeReplace()
                    throws java.io.ObjectStreamException {
                return super.writeReplace();
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseFrom(
                    com.google.protobuf.ByteString data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseFrom(
                    com.google.protobuf.ByteString data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseFrom(byte[] data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseFrom(
                    byte[] data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return PARSER.parseFrom(input);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return PARSER.parseFrom(input, extensionRegistry);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseDelimitedFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return PARSER.parseDelimitedFrom(input);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseDelimitedFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return PARSER.parseDelimitedFrom(input, extensionRegistry);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseFrom(
                    com.google.protobuf.CodedInputStream input)
                    throws java.io.IOException {
                return PARSER.parseFrom(input);
            }

            public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parseFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return PARSER.parseFrom(input, extensionRegistry);
            }

            public static Builder newBuilder() {
                return Builder.create();
            }

            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane prototype) {
                return newBuilder().mergeFrom(prototype);
            }

            public Builder toBuilder() {
                return newBuilder(this);
            }

            @java.lang.Override
            protected Builder newBuilderForType(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                Builder builder = new Builder(parent);
                return builder;
            }

            /**
             * Protobuf type {@code org.vertexarmy.omniray.raytracer.GeometricObject.Plane}
             */
            public static final class Builder extends
                    com.google.protobuf.GeneratedMessage.Builder<Builder>
                    implements org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.PlaneOrBuilder {
                public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
                    return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_descriptor;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
                internalGetFieldAccessorTable() {
                    return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_fieldAccessorTable
                            .ensureFieldAccessorsInitialized(
                                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.class, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.Builder.class);
                }

                // Construct using org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(
                        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        getOriginFieldBuilder();
                        getNormalFieldBuilder();
                    }
                }

                private static Builder create() {
                    return new Builder();
                }

                public Builder clear() {
                    super.clear();
                    if (originBuilder_ == null) {
                        origin_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                    } else {
                        originBuilder_.clear();
                    }
                    bitField0_ = (bitField0_ & ~0x00000001);
                    if (normalBuilder_ == null) {
                        normal_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                    } else {
                        normalBuilder_.clear();
                    }
                    bitField0_ = (bitField0_ & ~0x00000002);
                    return this;
                }

                public Builder clone() {
                    return create().mergeFrom(buildPartial());
                }

                public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
                    return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_descriptor;
                }

                public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane getDefaultInstanceForType() {
                    return org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.getDefaultInstance();
                }

                public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane build() {
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(result);
                    }
                    return result;
                }

                public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane buildPartial() {
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane result = new org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane(this);
                    int from_bitField0_ = bitField0_;
                    int to_bitField0_ = 0;
                    if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                        to_bitField0_ |= 0x00000001;
                    }
                    if (originBuilder_ == null) {
                        result.origin_ = origin_;
                    } else {
                        result.origin_ = originBuilder_.build();
                    }
                    if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                        to_bitField0_ |= 0x00000002;
                    }
                    if (normalBuilder_ == null) {
                        result.normal_ = normal_;
                    } else {
                        result.normal_ = normalBuilder_.build();
                    }
                    result.bitField0_ = to_bitField0_;
                    onBuilt();
                    return result;
                }

                public Builder mergeFrom(com.google.protobuf.Message other) {
                    if (other instanceof org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane) {
                        return mergeFrom((org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane) other);
                    } else {
                        super.mergeFrom(other);
                        return this;
                    }
                }

                public Builder mergeFrom(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane other) {
                    if (other == org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.getDefaultInstance())
                        return this;
                    if (other.hasOrigin()) {
                        mergeOrigin(other.getOrigin());
                    }
                    if (other.hasNormal()) {
                        mergeNormal(other.getNormal());
                    }
                    this.mergeUnknownFields(other.getUnknownFields());
                    return this;
                }

                public final boolean isInitialized() {
                    if (!hasOrigin()) {

                        return false;
                    }
                    if (!hasNormal()) {

                        return false;
                    }
                    if (!getOrigin().isInitialized()) {

                        return false;
                    }
                    if (!getNormal().isInitialized()) {

                        return false;
                    }
                    return true;
                }

                public Builder mergeFrom(
                        com.google.protobuf.CodedInputStream input,
                        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws java.io.IOException {
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane parsedMessage = null;
                    try {
                        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        parsedMessage = (org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane) e.getUnfinishedMessage();
                        throw e;
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        }
                    }
                    return this;
                }

                private int bitField0_;

                // required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;
                private org.vertexarmy.omniray.raytracer.Datastructures.Vec3 origin_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                private com.google.protobuf.SingleFieldBuilder<
                        org.vertexarmy.omniray.raytracer.Datastructures.Vec3, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder, org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder> originBuilder_;

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
                 */
                public boolean hasOrigin() {
                    return ((bitField0_ & 0x00000001) == 0x00000001);
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
                 */
                public org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getOrigin() {
                    if (originBuilder_ == null) {
                        return origin_;
                    } else {
                        return originBuilder_.getMessage();
                    }
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
                 */
                public Builder setOrigin(org.vertexarmy.omniray.raytracer.Datastructures.Vec3 value) {
                    if (originBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        origin_ = value;
                        onChanged();
                    } else {
                        originBuilder_.setMessage(value);
                    }
                    bitField0_ |= 0x00000001;
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
                 */
                public Builder setOrigin(
                        org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder builderForValue) {
                    if (originBuilder_ == null) {
                        origin_ = builderForValue.build();
                        onChanged();
                    } else {
                        originBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 0x00000001;
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
                 */
                public Builder mergeOrigin(org.vertexarmy.omniray.raytracer.Datastructures.Vec3 value) {
                    if (originBuilder_ == null) {
                        if (((bitField0_ & 0x00000001) == 0x00000001) &&
                                origin_ != org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance()) {
                            origin_ =
                                    org.vertexarmy.omniray.raytracer.Datastructures.Vec3.newBuilder(origin_).mergeFrom(value).buildPartial();
                        } else {
                            origin_ = value;
                        }
                        onChanged();
                    } else {
                        originBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 0x00000001;
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
                 */
                public Builder clearOrigin() {
                    if (originBuilder_ == null) {
                        origin_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                        onChanged();
                    } else {
                        originBuilder_.clear();
                    }
                    bitField0_ = (bitField0_ & ~0x00000001);
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
                 */
                public org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder getOriginBuilder() {
                    bitField0_ |= 0x00000001;
                    onChanged();
                    return getOriginFieldBuilder().getBuilder();
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
                 */
                public org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder getOriginOrBuilder() {
                    if (originBuilder_ != null) {
                        return originBuilder_.getMessageOrBuilder();
                    } else {
                        return origin_;
                    }
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 origin = 1;</code>
                 */
                private com.google.protobuf.SingleFieldBuilder<
                        org.vertexarmy.omniray.raytracer.Datastructures.Vec3, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder, org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder>
                getOriginFieldBuilder() {
                    if (originBuilder_ == null) {
                        originBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                                org.vertexarmy.omniray.raytracer.Datastructures.Vec3, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder, org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder>(
                                origin_,
                                getParentForChildren(),
                                isClean());
                        origin_ = null;
                    }
                    return originBuilder_;
                }

                // required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;
                private org.vertexarmy.omniray.raytracer.Datastructures.Vec3 normal_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                private com.google.protobuf.SingleFieldBuilder<
                        org.vertexarmy.omniray.raytracer.Datastructures.Vec3, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder, org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder> normalBuilder_;

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
                 */
                public boolean hasNormal() {
                    return ((bitField0_ & 0x00000002) == 0x00000002);
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
                 */
                public org.vertexarmy.omniray.raytracer.Datastructures.Vec3 getNormal() {
                    if (normalBuilder_ == null) {
                        return normal_;
                    } else {
                        return normalBuilder_.getMessage();
                    }
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
                 */
                public Builder setNormal(org.vertexarmy.omniray.raytracer.Datastructures.Vec3 value) {
                    if (normalBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        normal_ = value;
                        onChanged();
                    } else {
                        normalBuilder_.setMessage(value);
                    }
                    bitField0_ |= 0x00000002;
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
                 */
                public Builder setNormal(
                        org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder builderForValue) {
                    if (normalBuilder_ == null) {
                        normal_ = builderForValue.build();
                        onChanged();
                    } else {
                        normalBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 0x00000002;
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
                 */
                public Builder mergeNormal(org.vertexarmy.omniray.raytracer.Datastructures.Vec3 value) {
                    if (normalBuilder_ == null) {
                        if (((bitField0_ & 0x00000002) == 0x00000002) &&
                                normal_ != org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance()) {
                            normal_ =
                                    org.vertexarmy.omniray.raytracer.Datastructures.Vec3.newBuilder(normal_).mergeFrom(value).buildPartial();
                        } else {
                            normal_ = value;
                        }
                        onChanged();
                    } else {
                        normalBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 0x00000002;
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
                 */
                public Builder clearNormal() {
                    if (normalBuilder_ == null) {
                        normal_ = org.vertexarmy.omniray.raytracer.Datastructures.Vec3.getDefaultInstance();
                        onChanged();
                    } else {
                        normalBuilder_.clear();
                    }
                    bitField0_ = (bitField0_ & ~0x00000002);
                    return this;
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
                 */
                public org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder getNormalBuilder() {
                    bitField0_ |= 0x00000002;
                    onChanged();
                    return getNormalFieldBuilder().getBuilder();
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
                 */
                public org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder getNormalOrBuilder() {
                    if (normalBuilder_ != null) {
                        return normalBuilder_.getMessageOrBuilder();
                    } else {
                        return normal_;
                    }
                }

                /**
                 * <code>required .org.vertexarmy.omniray.raytracer.Vec3 normal = 2;</code>
                 */
                private com.google.protobuf.SingleFieldBuilder<
                        org.vertexarmy.omniray.raytracer.Datastructures.Vec3, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder, org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder>
                getNormalFieldBuilder() {
                    if (normalBuilder_ == null) {
                        normalBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                                org.vertexarmy.omniray.raytracer.Datastructures.Vec3, org.vertexarmy.omniray.raytracer.Datastructures.Vec3.Builder, org.vertexarmy.omniray.raytracer.Datastructures.Vec3OrBuilder>(
                                normal_,
                                getParentForChildren(),
                                isClean());
                        normal_ = null;
                    }
                    return normalBuilder_;
                }

                // @@protoc_insertion_point(builder_scope:org.vertexarmy.omniray.raytracer.GeometricObject.Plane)
            }

            static {
                defaultInstance = new Plane(true);
                defaultInstance.initFields();
            }

            // @@protoc_insertion_point(class_scope:org.vertexarmy.omniray.raytracer.GeometricObject.Plane)
        }

        private int bitField0_;
        // optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;
        public static final int SPHERE_FIELD_NUMBER = 1;
        private org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere sphere_;

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
         */
        public boolean hasSphere() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere getSphere() {
            return sphere_;
        }

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.SphereOrBuilder getSphereOrBuilder() {
            return sphere_;
        }

        // optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;
        public static final int PLANE_FIELD_NUMBER = 2;
        private org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane plane_;

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
         */
        public boolean hasPlane() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane getPlane() {
            return plane_;
        }

        /**
         * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.PlaneOrBuilder getPlaneOrBuilder() {
            return plane_;
        }

        private void initFields() {
            sphere_ = org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.getDefaultInstance();
            plane_ = org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (hasSphere()) {
                if (!getSphere().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasPlane()) {
                if (!getPlane().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeMessage(1, sphere_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(2, plane_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, sphere_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, plane_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.vertexarmy.omniray.raytracer.GeometricObject}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.class, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder.class);
            }

            // Construct using org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getSphereFieldBuilder();
                    getPlaneFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (sphereBuilder_ == null) {
                    sphere_ = org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.getDefaultInstance();
                } else {
                    sphereBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                if (planeBuilder_ == null) {
                    plane_ = org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.getDefaultInstance();
                } else {
                    planeBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_descriptor;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject getDefaultInstanceForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.getDefaultInstance();
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject build() {
                org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject buildPartial() {
                org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject result = new org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                if (sphereBuilder_ == null) {
                    result.sphere_ = sphere_;
                } else {
                    result.sphere_ = sphereBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (planeBuilder_ == null) {
                    result.plane_ = plane_;
                } else {
                    result.plane_ = planeBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject) {
                    return mergeFrom((org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject other) {
                if (other == org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.getDefaultInstance())
                    return this;
                if (other.hasSphere()) {
                    mergeSphere(other.getSphere());
                }
                if (other.hasPlane()) {
                    mergePlane(other.getPlane());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasSphere()) {
                    if (!getSphere().isInitialized()) {

                        return false;
                    }
                }
                if (hasPlane()) {
                    if (!getPlane().isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;
            private org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere sphere_ = org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.Builder, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.SphereOrBuilder> sphereBuilder_;

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
             */
            public boolean hasSphere() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere getSphere() {
                if (sphereBuilder_ == null) {
                    return sphere_;
                } else {
                    return sphereBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
             */
            public Builder setSphere(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere value) {
                if (sphereBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    sphere_ = value;
                    onChanged();
                } else {
                    sphereBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
             */
            public Builder setSphere(
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.Builder builderForValue) {
                if (sphereBuilder_ == null) {
                    sphere_ = builderForValue.build();
                    onChanged();
                } else {
                    sphereBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
             */
            public Builder mergeSphere(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere value) {
                if (sphereBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001) &&
                            sphere_ != org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.getDefaultInstance()) {
                        sphere_ =
                                org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.newBuilder(sphere_).mergeFrom(value).buildPartial();
                    } else {
                        sphere_ = value;
                    }
                    onChanged();
                } else {
                    sphereBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
             */
            public Builder clearSphere() {
                if (sphereBuilder_ == null) {
                    sphere_ = org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.getDefaultInstance();
                    onChanged();
                } else {
                    sphereBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                return this;
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.Builder getSphereBuilder() {
                bitField0_ |= 0x00000001;
                onChanged();
                return getSphereFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.SphereOrBuilder getSphereOrBuilder() {
                if (sphereBuilder_ != null) {
                    return sphereBuilder_.getMessageOrBuilder();
                } else {
                    return sphere_;
                }
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Sphere sphere = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.Builder, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.SphereOrBuilder>
            getSphereFieldBuilder() {
                if (sphereBuilder_ == null) {
                    sphereBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Sphere.Builder, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.SphereOrBuilder>(
                            sphere_,
                            getParentForChildren(),
                            isClean());
                    sphere_ = null;
                }
                return sphereBuilder_;
            }

            // optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;
            private org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane plane_ = org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.Builder, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.PlaneOrBuilder> planeBuilder_;

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
             */
            public boolean hasPlane() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane getPlane() {
                if (planeBuilder_ == null) {
                    return plane_;
                } else {
                    return planeBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
             */
            public Builder setPlane(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane value) {
                if (planeBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    plane_ = value;
                    onChanged();
                } else {
                    planeBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
             */
            public Builder setPlane(
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.Builder builderForValue) {
                if (planeBuilder_ == null) {
                    plane_ = builderForValue.build();
                    onChanged();
                } else {
                    planeBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
             */
            public Builder mergePlane(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane value) {
                if (planeBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) &&
                            plane_ != org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.getDefaultInstance()) {
                        plane_ =
                                org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.newBuilder(plane_).mergeFrom(value).buildPartial();
                    } else {
                        plane_ = value;
                    }
                    onChanged();
                } else {
                    planeBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
             */
            public Builder clearPlane() {
                if (planeBuilder_ == null) {
                    plane_ = org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.getDefaultInstance();
                    onChanged();
                } else {
                    planeBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.Builder getPlaneBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getPlaneFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.PlaneOrBuilder getPlaneOrBuilder() {
                if (planeBuilder_ != null) {
                    return planeBuilder_.getMessageOrBuilder();
                } else {
                    return plane_;
                }
            }

            /**
             * <code>optional .org.vertexarmy.omniray.raytracer.GeometricObject.Plane plane = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.Builder, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.PlaneOrBuilder>
            getPlaneFieldBuilder() {
                if (planeBuilder_ == null) {
                    planeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Plane.Builder, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.PlaneOrBuilder>(
                            plane_,
                            getParentForChildren(),
                            isClean());
                    plane_ = null;
                }
                return planeBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:org.vertexarmy.omniray.raytracer.GeometricObject)
        }

        static {
            defaultInstance = new GeometricObject(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.vertexarmy.omniray.raytracer.GeometricObject)
    }

    public interface WorldOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        java.util.List<org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject>
        getGeometricObjectList();

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject getGeometricObject(int index);

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        int getGeometricObjectCount();

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        java.util.List<? extends org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder>
        getGeometricObjectOrBuilderList();

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder getGeometricObjectOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code org.vertexarmy.omniray.raytracer.World}
     */
    public static final class World extends
            com.google.protobuf.GeneratedMessage
            implements WorldOrBuilder {
        // Use World.newBuilder() to construct.
        private World(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private World(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final World defaultInstance;

        public static World getDefaultInstance() {
            return defaultInstance;
        }

        public World getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private World(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                geometricObject_ = new java.util.ArrayList<org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            geometricObject_.add(input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    geometricObject_ = java.util.Collections.unmodifiableList(geometricObject_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_World_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_World_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.vertexarmy.omniray.raytracer.Datastructures.World.class, org.vertexarmy.omniray.raytracer.Datastructures.World.Builder.class);
        }

        public static com.google.protobuf.Parser<World> PARSER =
                new com.google.protobuf.AbstractParser<World>() {
                    public World parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new World(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<World> getParserForType() {
            return PARSER;
        }

        // repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;
        public static final int GEOMETRIC_OBJECT_FIELD_NUMBER = 1;
        private java.util.List<org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject> geometricObject_;

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        public java.util.List<org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject> getGeometricObjectList() {
            return geometricObject_;
        }

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        public java.util.List<? extends org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder>
        getGeometricObjectOrBuilderList() {
            return geometricObject_;
        }

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        public int getGeometricObjectCount() {
            return geometricObject_.size();
        }

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject getGeometricObject(int index) {
            return geometricObject_.get(index);
        }

        /**
         * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder getGeometricObjectOrBuilder(
                int index) {
            return geometricObject_.get(index);
        }

        private void initFields() {
            geometricObject_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            for (int i = 0; i < getGeometricObjectCount(); i++) {
                if (!getGeometricObject(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            for (int i = 0; i < geometricObject_.size(); i++) {
                output.writeMessage(1, geometricObject_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < geometricObject_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, geometricObject_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.World parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(org.vertexarmy.omniray.raytracer.Datastructures.World prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.vertexarmy.omniray.raytracer.World}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements org.vertexarmy.omniray.raytracer.Datastructures.WorldOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_World_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_World_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.vertexarmy.omniray.raytracer.Datastructures.World.class, org.vertexarmy.omniray.raytracer.Datastructures.World.Builder.class);
            }

            // Construct using org.vertexarmy.omniray.raytracer.Datastructures.World.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getGeometricObjectFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (geometricObjectBuilder_ == null) {
                    geometricObject_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    geometricObjectBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_World_descriptor;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.World getDefaultInstanceForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.World.getDefaultInstance();
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.World build() {
                org.vertexarmy.omniray.raytracer.Datastructures.World result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.World buildPartial() {
                org.vertexarmy.omniray.raytracer.Datastructures.World result = new org.vertexarmy.omniray.raytracer.Datastructures.World(this);
                int from_bitField0_ = bitField0_;
                if (geometricObjectBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        geometricObject_ = java.util.Collections.unmodifiableList(geometricObject_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.geometricObject_ = geometricObject_;
                } else {
                    result.geometricObject_ = geometricObjectBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.vertexarmy.omniray.raytracer.Datastructures.World) {
                    return mergeFrom((org.vertexarmy.omniray.raytracer.Datastructures.World) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.vertexarmy.omniray.raytracer.Datastructures.World other) {
                if (other == org.vertexarmy.omniray.raytracer.Datastructures.World.getDefaultInstance()) return this;
                if (geometricObjectBuilder_ == null) {
                    if (!other.geometricObject_.isEmpty()) {
                        if (geometricObject_.isEmpty()) {
                            geometricObject_ = other.geometricObject_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureGeometricObjectIsMutable();
                            geometricObject_.addAll(other.geometricObject_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.geometricObject_.isEmpty()) {
                        if (geometricObjectBuilder_.isEmpty()) {
                            geometricObjectBuilder_.dispose();
                            geometricObjectBuilder_ = null;
                            geometricObject_ = other.geometricObject_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            geometricObjectBuilder_ =
                                    com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                                            getGeometricObjectFieldBuilder() : null;
                        } else {
                            geometricObjectBuilder_.addAllMessages(other.geometricObject_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getGeometricObjectCount(); i++) {
                    if (!getGeometricObject(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.vertexarmy.omniray.raytracer.Datastructures.World parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.vertexarmy.omniray.raytracer.Datastructures.World) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;
            private java.util.List<org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject> geometricObject_ =
                    java.util.Collections.emptyList();

            private void ensureGeometricObjectIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    geometricObject_ = new java.util.ArrayList<org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject>(geometricObject_);
                    bitField0_ |= 0x00000001;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder> geometricObjectBuilder_;

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public java.util.List<org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject> getGeometricObjectList() {
                if (geometricObjectBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(geometricObject_);
                } else {
                    return geometricObjectBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public int getGeometricObjectCount() {
                if (geometricObjectBuilder_ == null) {
                    return geometricObject_.size();
                } else {
                    return geometricObjectBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject getGeometricObject(int index) {
                if (geometricObjectBuilder_ == null) {
                    return geometricObject_.get(index);
                } else {
                    return geometricObjectBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public Builder setGeometricObject(
                    int index, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject value) {
                if (geometricObjectBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGeometricObjectIsMutable();
                    geometricObject_.set(index, value);
                    onChanged();
                } else {
                    geometricObjectBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public Builder setGeometricObject(
                    int index, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder builderForValue) {
                if (geometricObjectBuilder_ == null) {
                    ensureGeometricObjectIsMutable();
                    geometricObject_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    geometricObjectBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public Builder addGeometricObject(org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject value) {
                if (geometricObjectBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGeometricObjectIsMutable();
                    geometricObject_.add(value);
                    onChanged();
                } else {
                    geometricObjectBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public Builder addGeometricObject(
                    int index, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject value) {
                if (geometricObjectBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGeometricObjectIsMutable();
                    geometricObject_.add(index, value);
                    onChanged();
                } else {
                    geometricObjectBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public Builder addGeometricObject(
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder builderForValue) {
                if (geometricObjectBuilder_ == null) {
                    ensureGeometricObjectIsMutable();
                    geometricObject_.add(builderForValue.build());
                    onChanged();
                } else {
                    geometricObjectBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public Builder addGeometricObject(
                    int index, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder builderForValue) {
                if (geometricObjectBuilder_ == null) {
                    ensureGeometricObjectIsMutable();
                    geometricObject_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    geometricObjectBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public Builder addAllGeometricObject(
                    java.lang.Iterable<? extends org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject> values) {
                if (geometricObjectBuilder_ == null) {
                    ensureGeometricObjectIsMutable();
                    super.addAll(values, geometricObject_);
                    onChanged();
                } else {
                    geometricObjectBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public Builder clearGeometricObject() {
                if (geometricObjectBuilder_ == null) {
                    geometricObject_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    geometricObjectBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public Builder removeGeometricObject(int index) {
                if (geometricObjectBuilder_ == null) {
                    ensureGeometricObjectIsMutable();
                    geometricObject_.remove(index);
                    onChanged();
                } else {
                    geometricObjectBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder getGeometricObjectBuilder(
                    int index) {
                return getGeometricObjectFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder getGeometricObjectOrBuilder(
                    int index) {
                if (geometricObjectBuilder_ == null) {
                    return geometricObject_.get(index);
                } else {
                    return geometricObjectBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public java.util.List<? extends org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder>
            getGeometricObjectOrBuilderList() {
                if (geometricObjectBuilder_ != null) {
                    return geometricObjectBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(geometricObject_);
                }
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder addGeometricObjectBuilder() {
                return getGeometricObjectFieldBuilder().addBuilder(
                        org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.getDefaultInstance());
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder addGeometricObjectBuilder(
                    int index) {
                return getGeometricObjectFieldBuilder().addBuilder(
                        index, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.getDefaultInstance());
            }

            /**
             * <code>repeated .org.vertexarmy.omniray.raytracer.GeometricObject geometric_object = 1;</code>
             */
            public java.util.List<org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder>
            getGeometricObjectBuilderList() {
                return getGeometricObjectFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder>
            getGeometricObjectFieldBuilder() {
                if (geometricObjectBuilder_ == null) {
                    geometricObjectBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                            org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObject.Builder, org.vertexarmy.omniray.raytracer.Datastructures.GeometricObjectOrBuilder>(
                            geometricObject_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    geometricObject_ = null;
                }
                return geometricObjectBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:org.vertexarmy.omniray.raytracer.World)
        }

        static {
            defaultInstance = new World(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.vertexarmy.omniray.raytracer.World)
    }

    public interface ViewPlaneOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required int32 x = 1;

        /**
         * <code>required int32 x = 1;</code>
         */
        boolean hasX();

        /**
         * <code>required int32 x = 1;</code>
         */
        int getX();

        // required int32 y = 2;

        /**
         * <code>required int32 y = 2;</code>
         */
        boolean hasY();

        /**
         * <code>required int32 y = 2;</code>
         */
        int getY();

        // required int32 width = 3;

        /**
         * <code>required int32 width = 3;</code>
         */
        boolean hasWidth();

        /**
         * <code>required int32 width = 3;</code>
         */
        int getWidth();

        // required int32 height = 4;

        /**
         * <code>required int32 height = 4;</code>
         */
        boolean hasHeight();

        /**
         * <code>required int32 height = 4;</code>
         */
        int getHeight();
    }

    /**
     * Protobuf type {@code org.vertexarmy.omniray.raytracer.ViewPlane}
     */
    public static final class ViewPlane extends
            com.google.protobuf.GeneratedMessage
            implements ViewPlaneOrBuilder {
        // Use ViewPlane.newBuilder() to construct.
        private ViewPlane(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private ViewPlane(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final ViewPlane defaultInstance;

        public static ViewPlane getDefaultInstance() {
            return defaultInstance;
        }

        public ViewPlane getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private ViewPlane(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            x_ = input.readInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            y_ = input.readInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            width_ = input.readInt32();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            height_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.class, org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.Builder.class);
        }

        public static com.google.protobuf.Parser<ViewPlane> PARSER =
                new com.google.protobuf.AbstractParser<ViewPlane>() {
                    public ViewPlane parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new ViewPlane(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<ViewPlane> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // required int32 x = 1;
        public static final int X_FIELD_NUMBER = 1;
        private int x_;

        /**
         * <code>required int32 x = 1;</code>
         */
        public boolean hasX() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required int32 x = 1;</code>
         */
        public int getX() {
            return x_;
        }

        // required int32 y = 2;
        public static final int Y_FIELD_NUMBER = 2;
        private int y_;

        /**
         * <code>required int32 y = 2;</code>
         */
        public boolean hasY() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required int32 y = 2;</code>
         */
        public int getY() {
            return y_;
        }

        // required int32 width = 3;
        public static final int WIDTH_FIELD_NUMBER = 3;
        private int width_;

        /**
         * <code>required int32 width = 3;</code>
         */
        public boolean hasWidth() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required int32 width = 3;</code>
         */
        public int getWidth() {
            return width_;
        }

        // required int32 height = 4;
        public static final int HEIGHT_FIELD_NUMBER = 4;
        private int height_;

        /**
         * <code>required int32 height = 4;</code>
         */
        public boolean hasHeight() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>required int32 height = 4;</code>
         */
        public int getHeight() {
            return height_;
        }

        private void initFields() {
            x_ = 0;
            y_ = 0;
            width_ = 0;
            height_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasX()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasY()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasWidth()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasHeight()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(1, x_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt32(2, y_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(3, width_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeInt32(4, height_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(1, x_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, y_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, width_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, height_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.vertexarmy.omniray.raytracer.ViewPlane}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements org.vertexarmy.omniray.raytracer.Datastructures.ViewPlaneOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.class, org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.Builder.class);
            }

            // Construct using org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                x_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                y_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                width_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                height_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_descriptor;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane getDefaultInstanceForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.getDefaultInstance();
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane build() {
                org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane buildPartial() {
                org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane result = new org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.x_ = x_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.y_ = y_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.width_ = width_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.height_ = height_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane) {
                    return mergeFrom((org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane other) {
                if (other == org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.getDefaultInstance())
                    return this;
                if (other.hasX()) {
                    setX(other.getX());
                }
                if (other.hasY()) {
                    setY(other.getY());
                }
                if (other.hasWidth()) {
                    setWidth(other.getWidth());
                }
                if (other.hasHeight()) {
                    setHeight(other.getHeight());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasX()) {

                    return false;
                }
                if (!hasY()) {

                    return false;
                }
                if (!hasWidth()) {

                    return false;
                }
                if (!hasHeight()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required int32 x = 1;
            private int x_;

            /**
             * <code>required int32 x = 1;</code>
             */
            public boolean hasX() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required int32 x = 1;</code>
             */
            public int getX() {
                return x_;
            }

            /**
             * <code>required int32 x = 1;</code>
             */
            public Builder setX(int value) {
                bitField0_ |= 0x00000001;
                x_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 x = 1;</code>
             */
            public Builder clearX() {
                bitField0_ = (bitField0_ & ~0x00000001);
                x_ = 0;
                onChanged();
                return this;
            }

            // required int32 y = 2;
            private int y_;

            /**
             * <code>required int32 y = 2;</code>
             */
            public boolean hasY() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required int32 y = 2;</code>
             */
            public int getY() {
                return y_;
            }

            /**
             * <code>required int32 y = 2;</code>
             */
            public Builder setY(int value) {
                bitField0_ |= 0x00000002;
                y_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 y = 2;</code>
             */
            public Builder clearY() {
                bitField0_ = (bitField0_ & ~0x00000002);
                y_ = 0;
                onChanged();
                return this;
            }

            // required int32 width = 3;
            private int width_;

            /**
             * <code>required int32 width = 3;</code>
             */
            public boolean hasWidth() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required int32 width = 3;</code>
             */
            public int getWidth() {
                return width_;
            }

            /**
             * <code>required int32 width = 3;</code>
             */
            public Builder setWidth(int value) {
                bitField0_ |= 0x00000004;
                width_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 width = 3;</code>
             */
            public Builder clearWidth() {
                bitField0_ = (bitField0_ & ~0x00000004);
                width_ = 0;
                onChanged();
                return this;
            }

            // required int32 height = 4;
            private int height_;

            /**
             * <code>required int32 height = 4;</code>
             */
            public boolean hasHeight() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>required int32 height = 4;</code>
             */
            public int getHeight() {
                return height_;
            }

            /**
             * <code>required int32 height = 4;</code>
             */
            public Builder setHeight(int value) {
                bitField0_ |= 0x00000008;
                height_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required int32 height = 4;</code>
             */
            public Builder clearHeight() {
                bitField0_ = (bitField0_ & ~0x00000008);
                height_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:org.vertexarmy.omniray.raytracer.ViewPlane)
        }

        static {
            defaultInstance = new ViewPlane(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.vertexarmy.omniray.raytracer.ViewPlane)
    }

    public interface SamplerOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;</code>
         */
        boolean hasSamplingTechnique();

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique getSamplingTechnique();

        // optional int32 sample_count = 2;

        /**
         * <code>optional int32 sample_count = 2;</code>
         */
        boolean hasSampleCount();

        /**
         * <code>optional int32 sample_count = 2;</code>
         */
        int getSampleCount();
    }

    /**
     * Protobuf type {@code org.vertexarmy.omniray.raytracer.Sampler}
     */
    public static final class Sampler extends
            com.google.protobuf.GeneratedMessage
            implements SamplerOrBuilder {
        // Use Sampler.newBuilder() to construct.
        private Sampler(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Sampler(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Sampler defaultInstance;

        public static Sampler getDefaultInstance() {
            return defaultInstance;
        }

        public Sampler getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Sampler(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            int rawValue = input.readEnum();
                            org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique value = org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(1, rawValue);
                            } else {
                                bitField0_ |= 0x00000001;
                                samplingTechnique_ = value;
                            }
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            sampleCount_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Sampler_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Sampler_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.vertexarmy.omniray.raytracer.Datastructures.Sampler.class, org.vertexarmy.omniray.raytracer.Datastructures.Sampler.Builder.class);
        }

        public static com.google.protobuf.Parser<Sampler> PARSER =
                new com.google.protobuf.AbstractParser<Sampler>() {
                    public Sampler parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new Sampler(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<Sampler> getParserForType() {
            return PARSER;
        }

        /**
         * Protobuf enum {@code org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique}
         */
        public enum SamplingTechnique
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>NONE = 1;</code>
             */
            NONE(0, 1),
            /**
             * <code>RANDOM = 2;</code>
             */
            RANDOM(1, 2),
            /**
             * <code>MULTI_JITTERED = 3;</code>
             */
            MULTI_JITTERED(2, 3),;

            /**
             * <code>NONE = 1;</code>
             */
            public static final int NONE_VALUE = 1;
            /**
             * <code>RANDOM = 2;</code>
             */
            public static final int RANDOM_VALUE = 2;
            /**
             * <code>MULTI_JITTERED = 3;</code>
             */
            public static final int MULTI_JITTERED_VALUE = 3;


            public final int getNumber() {
                return value;
            }

            public static SamplingTechnique valueOf(int value) {
                switch (value) {
                    case 1:
                        return NONE;
                    case 2:
                        return RANDOM;
                    case 3:
                        return MULTI_JITTERED;
                    default:
                        return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<SamplingTechnique>
            internalGetValueMap() {
                return internalValueMap;
            }

            private static com.google.protobuf.Internal.EnumLiteMap<SamplingTechnique>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<SamplingTechnique>() {
                        public SamplingTechnique findValueByNumber(int number) {
                            return SamplingTechnique.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }

            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }

            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.Sampler.getDescriptor().getEnumTypes().get(0);
            }

            private static final SamplingTechnique[] VALUES = values();

            public static SamplingTechnique valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private SamplingTechnique(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique)
        }

        private int bitField0_;
        // required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;
        public static final int SAMPLING_TECHNIQUE_FIELD_NUMBER = 1;
        private org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique samplingTechnique_;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;</code>
         */
        public boolean hasSamplingTechnique() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique getSamplingTechnique() {
            return samplingTechnique_;
        }

        // optional int32 sample_count = 2;
        public static final int SAMPLE_COUNT_FIELD_NUMBER = 2;
        private int sampleCount_;

        /**
         * <code>optional int32 sample_count = 2;</code>
         */
        public boolean hasSampleCount() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional int32 sample_count = 2;</code>
         */
        public int getSampleCount() {
            return sampleCount_;
        }

        private void initFields() {
            samplingTechnique_ = org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique.NONE;
            sampleCount_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasSamplingTechnique()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeEnum(1, samplingTechnique_.getNumber());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt32(2, sampleCount_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(1, samplingTechnique_.getNumber());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, sampleCount_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Sampler parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(org.vertexarmy.omniray.raytracer.Datastructures.Sampler prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.vertexarmy.omniray.raytracer.Sampler}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements org.vertexarmy.omniray.raytracer.Datastructures.SamplerOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Sampler_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Sampler_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.vertexarmy.omniray.raytracer.Datastructures.Sampler.class, org.vertexarmy.omniray.raytracer.Datastructures.Sampler.Builder.class);
            }

            // Construct using org.vertexarmy.omniray.raytracer.Datastructures.Sampler.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                samplingTechnique_ = org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique.NONE;
                bitField0_ = (bitField0_ & ~0x00000001);
                sampleCount_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Sampler_descriptor;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Sampler getDefaultInstanceForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.Sampler.getDefaultInstance();
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Sampler build() {
                org.vertexarmy.omniray.raytracer.Datastructures.Sampler result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Sampler buildPartial() {
                org.vertexarmy.omniray.raytracer.Datastructures.Sampler result = new org.vertexarmy.omniray.raytracer.Datastructures.Sampler(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.samplingTechnique_ = samplingTechnique_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.sampleCount_ = sampleCount_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.vertexarmy.omniray.raytracer.Datastructures.Sampler) {
                    return mergeFrom((org.vertexarmy.omniray.raytracer.Datastructures.Sampler) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.vertexarmy.omniray.raytracer.Datastructures.Sampler other) {
                if (other == org.vertexarmy.omniray.raytracer.Datastructures.Sampler.getDefaultInstance()) return this;
                if (other.hasSamplingTechnique()) {
                    setSamplingTechnique(other.getSamplingTechnique());
                }
                if (other.hasSampleCount()) {
                    setSampleCount(other.getSampleCount());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSamplingTechnique()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.vertexarmy.omniray.raytracer.Datastructures.Sampler parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.vertexarmy.omniray.raytracer.Datastructures.Sampler) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;
            private org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique samplingTechnique_ = org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique.NONE;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;</code>
             */
            public boolean hasSamplingTechnique() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique getSamplingTechnique() {
                return samplingTechnique_;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;</code>
             */
            public Builder setSamplingTechnique(org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                samplingTechnique_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler.SamplingTechnique sampling_technique = 1;</code>
             */
            public Builder clearSamplingTechnique() {
                bitField0_ = (bitField0_ & ~0x00000001);
                samplingTechnique_ = org.vertexarmy.omniray.raytracer.Datastructures.Sampler.SamplingTechnique.NONE;
                onChanged();
                return this;
            }

            // optional int32 sample_count = 2;
            private int sampleCount_;

            /**
             * <code>optional int32 sample_count = 2;</code>
             */
            public boolean hasSampleCount() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional int32 sample_count = 2;</code>
             */
            public int getSampleCount() {
                return sampleCount_;
            }

            /**
             * <code>optional int32 sample_count = 2;</code>
             */
            public Builder setSampleCount(int value) {
                bitField0_ |= 0x00000002;
                sampleCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 sample_count = 2;</code>
             */
            public Builder clearSampleCount() {
                bitField0_ = (bitField0_ & ~0x00000002);
                sampleCount_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:org.vertexarmy.omniray.raytracer.Sampler)
        }

        static {
            defaultInstance = new Sampler(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.vertexarmy.omniray.raytracer.Sampler)
    }

    public interface SettingsOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
         */
        boolean hasSampler();

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.Sampler getSampler();

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.SamplerOrBuilder getSamplerOrBuilder();
    }

    /**
     * Protobuf type {@code org.vertexarmy.omniray.raytracer.Settings}
     */
    public static final class Settings extends
            com.google.protobuf.GeneratedMessage
            implements SettingsOrBuilder {
        // Use Settings.newBuilder() to construct.
        private Settings(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Settings(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Settings defaultInstance;

        public static Settings getDefaultInstance() {
            return defaultInstance;
        }

        public Settings getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Settings(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.vertexarmy.omniray.raytracer.Datastructures.Sampler.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                                subBuilder = sampler_.toBuilder();
                            }
                            sampler_ = input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.Sampler.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(sampler_);
                                sampler_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000001;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Settings_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Settings_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.vertexarmy.omniray.raytracer.Datastructures.Settings.class, org.vertexarmy.omniray.raytracer.Datastructures.Settings.Builder.class);
        }

        public static com.google.protobuf.Parser<Settings> PARSER =
                new com.google.protobuf.AbstractParser<Settings>() {
                    public Settings parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new Settings(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<Settings> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;
        public static final int SAMPLER_FIELD_NUMBER = 1;
        private org.vertexarmy.omniray.raytracer.Datastructures.Sampler sampler_;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
         */
        public boolean hasSampler() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.Sampler getSampler() {
            return sampler_;
        }

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.SamplerOrBuilder getSamplerOrBuilder() {
            return sampler_;
        }

        private void initFields() {
            sampler_ = org.vertexarmy.omniray.raytracer.Datastructures.Sampler.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasSampler()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getSampler().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeMessage(1, sampler_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, sampler_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Settings parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(org.vertexarmy.omniray.raytracer.Datastructures.Settings prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.vertexarmy.omniray.raytracer.Settings}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements org.vertexarmy.omniray.raytracer.Datastructures.SettingsOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Settings_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Settings_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.vertexarmy.omniray.raytracer.Datastructures.Settings.class, org.vertexarmy.omniray.raytracer.Datastructures.Settings.Builder.class);
            }

            // Construct using org.vertexarmy.omniray.raytracer.Datastructures.Settings.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getSamplerFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (samplerBuilder_ == null) {
                    sampler_ = org.vertexarmy.omniray.raytracer.Datastructures.Sampler.getDefaultInstance();
                } else {
                    samplerBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Settings_descriptor;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Settings getDefaultInstanceForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.Settings.getDefaultInstance();
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Settings build() {
                org.vertexarmy.omniray.raytracer.Datastructures.Settings result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Settings buildPartial() {
                org.vertexarmy.omniray.raytracer.Datastructures.Settings result = new org.vertexarmy.omniray.raytracer.Datastructures.Settings(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                if (samplerBuilder_ == null) {
                    result.sampler_ = sampler_;
                } else {
                    result.sampler_ = samplerBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.vertexarmy.omniray.raytracer.Datastructures.Settings) {
                    return mergeFrom((org.vertexarmy.omniray.raytracer.Datastructures.Settings) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.vertexarmy.omniray.raytracer.Datastructures.Settings other) {
                if (other == org.vertexarmy.omniray.raytracer.Datastructures.Settings.getDefaultInstance()) return this;
                if (other.hasSampler()) {
                    mergeSampler(other.getSampler());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSampler()) {

                    return false;
                }
                if (!getSampler().isInitialized()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.vertexarmy.omniray.raytracer.Datastructures.Settings parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.vertexarmy.omniray.raytracer.Datastructures.Settings) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;
            private org.vertexarmy.omniray.raytracer.Datastructures.Sampler sampler_ = org.vertexarmy.omniray.raytracer.Datastructures.Sampler.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.Sampler, org.vertexarmy.omniray.raytracer.Datastructures.Sampler.Builder, org.vertexarmy.omniray.raytracer.Datastructures.SamplerOrBuilder> samplerBuilder_;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
             */
            public boolean hasSampler() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Sampler getSampler() {
                if (samplerBuilder_ == null) {
                    return sampler_;
                } else {
                    return samplerBuilder_.getMessage();
                }
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
             */
            public Builder setSampler(org.vertexarmy.omniray.raytracer.Datastructures.Sampler value) {
                if (samplerBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    sampler_ = value;
                    onChanged();
                } else {
                    samplerBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
             */
            public Builder setSampler(
                    org.vertexarmy.omniray.raytracer.Datastructures.Sampler.Builder builderForValue) {
                if (samplerBuilder_ == null) {
                    sampler_ = builderForValue.build();
                    onChanged();
                } else {
                    samplerBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
             */
            public Builder mergeSampler(org.vertexarmy.omniray.raytracer.Datastructures.Sampler value) {
                if (samplerBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001) &&
                            sampler_ != org.vertexarmy.omniray.raytracer.Datastructures.Sampler.getDefaultInstance()) {
                        sampler_ =
                                org.vertexarmy.omniray.raytracer.Datastructures.Sampler.newBuilder(sampler_).mergeFrom(value).buildPartial();
                    } else {
                        sampler_ = value;
                    }
                    onChanged();
                } else {
                    samplerBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
             */
            public Builder clearSampler() {
                if (samplerBuilder_ == null) {
                    sampler_ = org.vertexarmy.omniray.raytracer.Datastructures.Sampler.getDefaultInstance();
                    onChanged();
                } else {
                    samplerBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Sampler.Builder getSamplerBuilder() {
                bitField0_ |= 0x00000001;
                onChanged();
                return getSamplerFieldBuilder().getBuilder();
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.SamplerOrBuilder getSamplerOrBuilder() {
                if (samplerBuilder_ != null) {
                    return samplerBuilder_.getMessageOrBuilder();
                } else {
                    return sampler_;
                }
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Sampler sampler = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.Sampler, org.vertexarmy.omniray.raytracer.Datastructures.Sampler.Builder, org.vertexarmy.omniray.raytracer.Datastructures.SamplerOrBuilder>
            getSamplerFieldBuilder() {
                if (samplerBuilder_ == null) {
                    samplerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            org.vertexarmy.omniray.raytracer.Datastructures.Sampler, org.vertexarmy.omniray.raytracer.Datastructures.Sampler.Builder, org.vertexarmy.omniray.raytracer.Datastructures.SamplerOrBuilder>(
                            sampler_,
                            getParentForChildren(),
                            isClean());
                    sampler_ = null;
                }
                return samplerBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:org.vertexarmy.omniray.raytracer.Settings)
        }

        static {
            defaultInstance = new Settings(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.vertexarmy.omniray.raytracer.Settings)
    }

    public interface TaskOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required string id = 1;

        /**
         * <code>required string id = 1;</code>
         */
        boolean hasId();

        /**
         * <code>required string id = 1;</code>
         */
        java.lang.String getId();

        /**
         * <code>required string id = 1;</code>
         */
        com.google.protobuf.ByteString
        getIdBytes();

        // required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
         */
        boolean hasViewPlane();

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane getViewPlane();

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.ViewPlaneOrBuilder getViewPlaneOrBuilder();

        // required .org.vertexarmy.omniray.raytracer.Settings settings = 3;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
         */
        boolean hasSettings();

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.Settings getSettings();

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.SettingsOrBuilder getSettingsOrBuilder();

        // required .org.vertexarmy.omniray.raytracer.World world = 4;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
         */
        boolean hasWorld();

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.World getWorld();

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
         */
        org.vertexarmy.omniray.raytracer.Datastructures.WorldOrBuilder getWorldOrBuilder();
    }

    /**
     * Protobuf type {@code org.vertexarmy.omniray.raytracer.Task}
     */
    public static final class Task extends
            com.google.protobuf.GeneratedMessage
            implements TaskOrBuilder {
        // Use Task.newBuilder() to construct.
        private Task(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Task(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Task defaultInstance;

        public static Task getDefaultInstance() {
            return defaultInstance;
        }

        public Task getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Task(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            bitField0_ |= 0x00000001;
                            id_ = input.readBytes();
                            break;
                        }
                        case 18: {
                            org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = viewPlane_.toBuilder();
                            }
                            viewPlane_ = input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(viewPlane_);
                                viewPlane_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                        case 26: {
                            org.vertexarmy.omniray.raytracer.Datastructures.Settings.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                                subBuilder = settings_.toBuilder();
                            }
                            settings_ = input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.Settings.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(settings_);
                                settings_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000004;
                            break;
                        }
                        case 34: {
                            org.vertexarmy.omniray.raytracer.Datastructures.World.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                                subBuilder = world_.toBuilder();
                            }
                            world_ = input.readMessage(org.vertexarmy.omniray.raytracer.Datastructures.World.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(world_);
                                world_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000008;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Task_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Task_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.vertexarmy.omniray.raytracer.Datastructures.Task.class, org.vertexarmy.omniray.raytracer.Datastructures.Task.Builder.class);
        }

        public static com.google.protobuf.Parser<Task> PARSER =
                new com.google.protobuf.AbstractParser<Task>() {
                    public Task parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new Task(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<Task> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // required string id = 1;
        public static final int ID_FIELD_NUMBER = 1;
        private java.lang.Object id_;

        /**
         * <code>required string id = 1;</code>
         */
        public boolean hasId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required string id = 1;</code>
         */
        public java.lang.String getId() {
            java.lang.Object ref = id_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    id_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string id = 1;</code>
         */
        public com.google.protobuf.ByteString
        getIdBytes() {
            java.lang.Object ref = id_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                id_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        // required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;
        public static final int VIEWPLANE_FIELD_NUMBER = 2;
        private org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane viewPlane_;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
         */
        public boolean hasViewPlane() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane getViewPlane() {
            return viewPlane_;
        }

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.ViewPlaneOrBuilder getViewPlaneOrBuilder() {
            return viewPlane_;
        }

        // required .org.vertexarmy.omniray.raytracer.Settings settings = 3;
        public static final int SETTINGS_FIELD_NUMBER = 3;
        private org.vertexarmy.omniray.raytracer.Datastructures.Settings settings_;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
         */
        public boolean hasSettings() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.Settings getSettings() {
            return settings_;
        }

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.SettingsOrBuilder getSettingsOrBuilder() {
            return settings_;
        }

        // required .org.vertexarmy.omniray.raytracer.World world = 4;
        public static final int WORLD_FIELD_NUMBER = 4;
        private org.vertexarmy.omniray.raytracer.Datastructures.World world_;

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
         */
        public boolean hasWorld() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.World getWorld() {
            return world_;
        }

        /**
         * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
         */
        public org.vertexarmy.omniray.raytracer.Datastructures.WorldOrBuilder getWorldOrBuilder() {
            return world_;
        }

        private void initFields() {
            id_ = "";
            viewPlane_ = org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.getDefaultInstance();
            settings_ = org.vertexarmy.omniray.raytracer.Datastructures.Settings.getDefaultInstance();
            world_ = org.vertexarmy.omniray.raytracer.Datastructures.World.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasId()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasViewPlane()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSettings()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasWorld()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getViewPlane().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getSettings().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getWorld().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, getIdBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(2, viewPlane_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeMessage(3, settings_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeMessage(4, world_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, getIdBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, viewPlane_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, settings_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, world_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static org.vertexarmy.omniray.raytracer.Datastructures.Task parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(org.vertexarmy.omniray.raytracer.Datastructures.Task prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.vertexarmy.omniray.raytracer.Task}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements org.vertexarmy.omniray.raytracer.Datastructures.TaskOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Task_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Task_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.vertexarmy.omniray.raytracer.Datastructures.Task.class, org.vertexarmy.omniray.raytracer.Datastructures.Task.Builder.class);
            }

            // Construct using org.vertexarmy.omniray.raytracer.Datastructures.Task.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getViewPlaneFieldBuilder();
                    getSettingsFieldBuilder();
                    getWorldFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                id_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                if (viewPlaneBuilder_ == null) {
                    viewPlane_ = org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.getDefaultInstance();
                } else {
                    viewPlaneBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                if (settingsBuilder_ == null) {
                    settings_ = org.vertexarmy.omniray.raytracer.Datastructures.Settings.getDefaultInstance();
                } else {
                    settingsBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                if (worldBuilder_ == null) {
                    world_ = org.vertexarmy.omniray.raytracer.Datastructures.World.getDefaultInstance();
                } else {
                    worldBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.internal_static_org_vertexarmy_omniray_raytracer_Task_descriptor;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Task getDefaultInstanceForType() {
                return org.vertexarmy.omniray.raytracer.Datastructures.Task.getDefaultInstance();
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Task build() {
                org.vertexarmy.omniray.raytracer.Datastructures.Task result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.vertexarmy.omniray.raytracer.Datastructures.Task buildPartial() {
                org.vertexarmy.omniray.raytracer.Datastructures.Task result = new org.vertexarmy.omniray.raytracer.Datastructures.Task(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.id_ = id_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (viewPlaneBuilder_ == null) {
                    result.viewPlane_ = viewPlane_;
                } else {
                    result.viewPlane_ = viewPlaneBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                if (settingsBuilder_ == null) {
                    result.settings_ = settings_;
                } else {
                    result.settings_ = settingsBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                if (worldBuilder_ == null) {
                    result.world_ = world_;
                } else {
                    result.world_ = worldBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.vertexarmy.omniray.raytracer.Datastructures.Task) {
                    return mergeFrom((org.vertexarmy.omniray.raytracer.Datastructures.Task) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.vertexarmy.omniray.raytracer.Datastructures.Task other) {
                if (other == org.vertexarmy.omniray.raytracer.Datastructures.Task.getDefaultInstance()) return this;
                if (other.hasId()) {
                    bitField0_ |= 0x00000001;
                    id_ = other.id_;
                    onChanged();
                }
                if (other.hasViewPlane()) {
                    mergeViewPlane(other.getViewPlane());
                }
                if (other.hasSettings()) {
                    mergeSettings(other.getSettings());
                }
                if (other.hasWorld()) {
                    mergeWorld(other.getWorld());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasId()) {

                    return false;
                }
                if (!hasViewPlane()) {

                    return false;
                }
                if (!hasSettings()) {

                    return false;
                }
                if (!hasWorld()) {

                    return false;
                }
                if (!getViewPlane().isInitialized()) {

                    return false;
                }
                if (!getSettings().isInitialized()) {

                    return false;
                }
                if (!getWorld().isInitialized()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.vertexarmy.omniray.raytracer.Datastructures.Task parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.vertexarmy.omniray.raytracer.Datastructures.Task) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // required string id = 1;
            private java.lang.Object id_ = "";

            /**
             * <code>required string id = 1;</code>
             */
            public boolean hasId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required string id = 1;</code>
             */
            public java.lang.String getId() {
                java.lang.Object ref = id_;
                if (!(ref instanceof java.lang.String)) {
                    java.lang.String s = ((com.google.protobuf.ByteString) ref)
                            .toStringUtf8();
                    id_ = s;
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <code>required string id = 1;</code>
             */
            public com.google.protobuf.ByteString
            getIdBytes() {
                java.lang.Object ref = id_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    id_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string id = 1;</code>
             */
            public Builder setId(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                id_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string id = 1;</code>
             */
            public Builder clearId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                id_ = getDefaultInstance().getId();
                onChanged();
                return this;
            }

            /**
             * <code>required string id = 1;</code>
             */
            public Builder setIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                id_ = value;
                onChanged();
                return this;
            }

            // required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;
            private org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane viewPlane_ = org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane, org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.Builder, org.vertexarmy.omniray.raytracer.Datastructures.ViewPlaneOrBuilder> viewPlaneBuilder_;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
             */
            public boolean hasViewPlane() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane getViewPlane() {
                if (viewPlaneBuilder_ == null) {
                    return viewPlane_;
                } else {
                    return viewPlaneBuilder_.getMessage();
                }
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
             */
            public Builder setViewPlane(org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane value) {
                if (viewPlaneBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    viewPlane_ = value;
                    onChanged();
                } else {
                    viewPlaneBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
             */
            public Builder setViewPlane(
                    org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.Builder builderForValue) {
                if (viewPlaneBuilder_ == null) {
                    viewPlane_ = builderForValue.build();
                    onChanged();
                } else {
                    viewPlaneBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
             */
            public Builder mergeViewPlane(org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane value) {
                if (viewPlaneBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) &&
                            viewPlane_ != org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.getDefaultInstance()) {
                        viewPlane_ =
                                org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.newBuilder(viewPlane_).mergeFrom(value).buildPartial();
                    } else {
                        viewPlane_ = value;
                    }
                    onChanged();
                } else {
                    viewPlaneBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
             */
            public Builder clearViewPlane() {
                if (viewPlaneBuilder_ == null) {
                    viewPlane_ = org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.getDefaultInstance();
                    onChanged();
                } else {
                    viewPlaneBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.Builder getViewPlaneBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getViewPlaneFieldBuilder().getBuilder();
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.ViewPlaneOrBuilder getViewPlaneOrBuilder() {
                if (viewPlaneBuilder_ != null) {
                    return viewPlaneBuilder_.getMessageOrBuilder();
                } else {
                    return viewPlane_;
                }
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.ViewPlane viewPlane = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane, org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.Builder, org.vertexarmy.omniray.raytracer.Datastructures.ViewPlaneOrBuilder>
            getViewPlaneFieldBuilder() {
                if (viewPlaneBuilder_ == null) {
                    viewPlaneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane, org.vertexarmy.omniray.raytracer.Datastructures.ViewPlane.Builder, org.vertexarmy.omniray.raytracer.Datastructures.ViewPlaneOrBuilder>(
                            viewPlane_,
                            getParentForChildren(),
                            isClean());
                    viewPlane_ = null;
                }
                return viewPlaneBuilder_;
            }

            // required .org.vertexarmy.omniray.raytracer.Settings settings = 3;
            private org.vertexarmy.omniray.raytracer.Datastructures.Settings settings_ = org.vertexarmy.omniray.raytracer.Datastructures.Settings.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.Settings, org.vertexarmy.omniray.raytracer.Datastructures.Settings.Builder, org.vertexarmy.omniray.raytracer.Datastructures.SettingsOrBuilder> settingsBuilder_;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
             */
            public boolean hasSettings() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Settings getSettings() {
                if (settingsBuilder_ == null) {
                    return settings_;
                } else {
                    return settingsBuilder_.getMessage();
                }
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
             */
            public Builder setSettings(org.vertexarmy.omniray.raytracer.Datastructures.Settings value) {
                if (settingsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    settings_ = value;
                    onChanged();
                } else {
                    settingsBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
             */
            public Builder setSettings(
                    org.vertexarmy.omniray.raytracer.Datastructures.Settings.Builder builderForValue) {
                if (settingsBuilder_ == null) {
                    settings_ = builderForValue.build();
                    onChanged();
                } else {
                    settingsBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
             */
            public Builder mergeSettings(org.vertexarmy.omniray.raytracer.Datastructures.Settings value) {
                if (settingsBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004) &&
                            settings_ != org.vertexarmy.omniray.raytracer.Datastructures.Settings.getDefaultInstance()) {
                        settings_ =
                                org.vertexarmy.omniray.raytracer.Datastructures.Settings.newBuilder(settings_).mergeFrom(value).buildPartial();
                    } else {
                        settings_ = value;
                    }
                    onChanged();
                } else {
                    settingsBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
             */
            public Builder clearSettings() {
                if (settingsBuilder_ == null) {
                    settings_ = org.vertexarmy.omniray.raytracer.Datastructures.Settings.getDefaultInstance();
                    onChanged();
                } else {
                    settingsBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.Settings.Builder getSettingsBuilder() {
                bitField0_ |= 0x00000004;
                onChanged();
                return getSettingsFieldBuilder().getBuilder();
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.SettingsOrBuilder getSettingsOrBuilder() {
                if (settingsBuilder_ != null) {
                    return settingsBuilder_.getMessageOrBuilder();
                } else {
                    return settings_;
                }
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.Settings settings = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.Settings, org.vertexarmy.omniray.raytracer.Datastructures.Settings.Builder, org.vertexarmy.omniray.raytracer.Datastructures.SettingsOrBuilder>
            getSettingsFieldBuilder() {
                if (settingsBuilder_ == null) {
                    settingsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            org.vertexarmy.omniray.raytracer.Datastructures.Settings, org.vertexarmy.omniray.raytracer.Datastructures.Settings.Builder, org.vertexarmy.omniray.raytracer.Datastructures.SettingsOrBuilder>(
                            settings_,
                            getParentForChildren(),
                            isClean());
                    settings_ = null;
                }
                return settingsBuilder_;
            }

            // required .org.vertexarmy.omniray.raytracer.World world = 4;
            private org.vertexarmy.omniray.raytracer.Datastructures.World world_ = org.vertexarmy.omniray.raytracer.Datastructures.World.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.World, org.vertexarmy.omniray.raytracer.Datastructures.World.Builder, org.vertexarmy.omniray.raytracer.Datastructures.WorldOrBuilder> worldBuilder_;

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
             */
            public boolean hasWorld() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.World getWorld() {
                if (worldBuilder_ == null) {
                    return world_;
                } else {
                    return worldBuilder_.getMessage();
                }
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
             */
            public Builder setWorld(org.vertexarmy.omniray.raytracer.Datastructures.World value) {
                if (worldBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    world_ = value;
                    onChanged();
                } else {
                    worldBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
             */
            public Builder setWorld(
                    org.vertexarmy.omniray.raytracer.Datastructures.World.Builder builderForValue) {
                if (worldBuilder_ == null) {
                    world_ = builderForValue.build();
                    onChanged();
                } else {
                    worldBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
             */
            public Builder mergeWorld(org.vertexarmy.omniray.raytracer.Datastructures.World value) {
                if (worldBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008) &&
                            world_ != org.vertexarmy.omniray.raytracer.Datastructures.World.getDefaultInstance()) {
                        world_ =
                                org.vertexarmy.omniray.raytracer.Datastructures.World.newBuilder(world_).mergeFrom(value).buildPartial();
                    } else {
                        world_ = value;
                    }
                    onChanged();
                } else {
                    worldBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
             */
            public Builder clearWorld() {
                if (worldBuilder_ == null) {
                    world_ = org.vertexarmy.omniray.raytracer.Datastructures.World.getDefaultInstance();
                    onChanged();
                } else {
                    worldBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.World.Builder getWorldBuilder() {
                bitField0_ |= 0x00000008;
                onChanged();
                return getWorldFieldBuilder().getBuilder();
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
             */
            public org.vertexarmy.omniray.raytracer.Datastructures.WorldOrBuilder getWorldOrBuilder() {
                if (worldBuilder_ != null) {
                    return worldBuilder_.getMessageOrBuilder();
                } else {
                    return world_;
                }
            }

            /**
             * <code>required .org.vertexarmy.omniray.raytracer.World world = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    org.vertexarmy.omniray.raytracer.Datastructures.World, org.vertexarmy.omniray.raytracer.Datastructures.World.Builder, org.vertexarmy.omniray.raytracer.Datastructures.WorldOrBuilder>
            getWorldFieldBuilder() {
                if (worldBuilder_ == null) {
                    worldBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            org.vertexarmy.omniray.raytracer.Datastructures.World, org.vertexarmy.omniray.raytracer.Datastructures.World.Builder, org.vertexarmy.omniray.raytracer.Datastructures.WorldOrBuilder>(
                            world_,
                            getParentForChildren(),
                            isClean());
                    world_ = null;
                }
                return worldBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:org.vertexarmy.omniray.raytracer.Task)
        }

        static {
            defaultInstance = new Task(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.vertexarmy.omniray.raytracer.Task)
    }

    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_org_vertexarmy_omniray_raytracer_Vec3_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_org_vertexarmy_omniray_raytracer_Vec3_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_org_vertexarmy_omniray_raytracer_World_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_org_vertexarmy_omniray_raytracer_World_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_org_vertexarmy_omniray_raytracer_Sampler_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_org_vertexarmy_omniray_raytracer_Sampler_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_org_vertexarmy_omniray_raytracer_Settings_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_org_vertexarmy_omniray_raytracer_Settings_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_org_vertexarmy_omniray_raytracer_Task_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_org_vertexarmy_omniray_raytracer_Task_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\024datastructures.proto\022 org.vertexarmy.o" +
                        "mniray.raytracer\"\'\n\004Vec3\022\t\n\001x\030\001 \002(\002\022\t\n\001y" +
                        "\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\356\002\n\017GeometricObject\022H\n" +
                        "\006sphere\030\001 \001(\01328.org.vertexarmy.omniray.r" +
                        "aytracer.GeometricObject.Sphere\022F\n\005plane" +
                        "\030\002 \001(\01327.org.vertexarmy.omniray.raytrace" +
                        "r.GeometricObject.Plane\032P\n\006Sphere\0226\n\006cen" +
                        "ter\030\001 \002(\0132&.org.vertexarmy.omniray.raytr" +
                        "acer.Vec3\022\016\n\006radius\030\002 \002(\002\032w\n\005Plane\0226\n\006or" +
                        "igin\030\001 \002(\0132&.org.vertexarmy.omniray.rayt",
                "racer.Vec3\0226\n\006normal\030\002 \002(\0132&.org.vertexa" +
                        "rmy.omniray.raytracer.Vec3\"T\n\005World\022K\n\020g" +
                        "eometric_object\030\001 \003(\01321.org.vertexarmy.o" +
                        "mniray.raytracer.GeometricObject\"@\n\tView" +
                        "Plane\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\r\n\005width\030\003 \002" +
                        "(\005\022\016\n\006height\030\004 \002(\005\"\267\001\n\007Sampler\022W\n\022sampli" +
                        "ng_technique\030\001 \002(\0162;.org.vertexarmy.omni" +
                        "ray.raytracer.Sampler.SamplingTechnique\022" +
                        "\024\n\014sample_count\030\002 \001(\005\"=\n\021SamplingTechniq" +
                        "ue\022\010\n\004NONE\020\001\022\n\n\006RANDOM\020\002\022\022\n\016MULTI_JITTER",
                "ED\020\003\"F\n\010Settings\022:\n\007sampler\030\001 \002(\0132).org." +
                        "vertexarmy.omniray.raytracer.Sampler\"\310\001\n" +
                        "\004Task\022\n\n\002id\030\001 \002(\t\022>\n\tviewPlane\030\002 \002(\0132+.o" +
                        "rg.vertexarmy.omniray.raytracer.ViewPlan" +
                        "e\022<\n\010settings\030\003 \002(\0132*.org.vertexarmy.omn" +
                        "iray.raytracer.Settings\0226\n\005world\030\004 \002(\0132\'" +
                        ".org.vertexarmy.omniray.raytracer.World"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        internal_static_org_vertexarmy_omniray_raytracer_Vec3_descriptor =
                                getDescriptor().getMessageTypes().get(0);
                        internal_static_org_vertexarmy_omniray_raytracer_Vec3_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_org_vertexarmy_omniray_raytracer_Vec3_descriptor,
                                new java.lang.String[]{"X", "Y", "Z",});
                        internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_descriptor =
                                getDescriptor().getMessageTypes().get(1);
                        internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_descriptor,
                                new java.lang.String[]{"Sphere", "Plane",});
                        internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_descriptor =
                                internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_descriptor.getNestedTypes().get(0);
                        internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Sphere_descriptor,
                                new java.lang.String[]{"Center", "Radius",});
                        internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_descriptor =
                                internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_descriptor.getNestedTypes().get(1);
                        internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_org_vertexarmy_omniray_raytracer_GeometricObject_Plane_descriptor,
                                new java.lang.String[]{"Origin", "Normal",});
                        internal_static_org_vertexarmy_omniray_raytracer_World_descriptor =
                                getDescriptor().getMessageTypes().get(2);
                        internal_static_org_vertexarmy_omniray_raytracer_World_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_org_vertexarmy_omniray_raytracer_World_descriptor,
                                new java.lang.String[]{"GeometricObject",});
                        internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_descriptor =
                                getDescriptor().getMessageTypes().get(3);
                        internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_org_vertexarmy_omniray_raytracer_ViewPlane_descriptor,
                                new java.lang.String[]{"X", "Y", "Width", "Height",});
                        internal_static_org_vertexarmy_omniray_raytracer_Sampler_descriptor =
                                getDescriptor().getMessageTypes().get(4);
                        internal_static_org_vertexarmy_omniray_raytracer_Sampler_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_org_vertexarmy_omniray_raytracer_Sampler_descriptor,
                                new java.lang.String[]{"SamplingTechnique", "SampleCount",});
                        internal_static_org_vertexarmy_omniray_raytracer_Settings_descriptor =
                                getDescriptor().getMessageTypes().get(5);
                        internal_static_org_vertexarmy_omniray_raytracer_Settings_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_org_vertexarmy_omniray_raytracer_Settings_descriptor,
                                new java.lang.String[]{"Sampler",});
                        internal_static_org_vertexarmy_omniray_raytracer_Task_descriptor =
                                getDescriptor().getMessageTypes().get(6);
                        internal_static_org_vertexarmy_omniray_raytracer_Task_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_org_vertexarmy_omniray_raytracer_Task_descriptor,
                                new java.lang.String[]{"Id", "ViewPlane", "Settings", "World",});
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
    }

    // @@protoc_insertion_point(outer_class_scope)
}
